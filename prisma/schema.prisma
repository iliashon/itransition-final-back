generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id         Int          @id @unique @default(autoincrement())
  email      String       @db.VarChar(256)
  password   String       @db.VarChar(64)
  first_name String       @db.VarChar(256)
  last_name  String       @db.VarChar(256)
  image_url  String?
  is_admin   Boolean      @default(false)
  blocked    Boolean      @default(false)
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  collection collection[]
  comment    comment[]
  like       like[]
  token      token?
}

model token {
  id            Int    @id @unique @default(autoincrement())
  user_id       Int    @unique
  refresh_token String
  user          user   @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model collection {
  id              Int             @id @unique @default(autoincrement())
  user_id         Int
  name            String          @db.VarChar(256)
  description     String
  type            String          @db.VarChar(64)
  image_url       String?
  created_at      DateTime        @default(now())
  collection_type collection_type @relation(fields: [type], references: [name])
  user            user            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  item            item[]
}

model collection_type {
  id         Int          @id @unique @default(autoincrement())
  name       String       @unique @db.VarChar(256)
  collection collection[]
}

model item {
  id            Int        @id @unique @default(autoincrement())
  collection_id Int
  name          String     @db.VarChar(256)
  image_url     String?
  created_at    DateTime   @default(now())
  comment       comment[]
  collection    collection @relation(fields: [collection_id], references: [id], onDelete: Cascade)
  like          like[]
  item_tag      item_tag[]
}

model comment {
  id         Int      @id @unique @default(autoincrement())
  text       String
  user_id    Int
  item_id    Int
  created_at DateTime @default(now())
  item       item     @relation(fields: [item_id], references: [id], onDelete: Cascade)
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model like {
  id      Int  @id @unique @default(autoincrement())
  user_id Int
  item_id Int
  item    item @relation(fields: [item_id], references: [id], onDelete: Cascade)
  user    user @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model tag {
  id       Int        @id @unique @default(autoincrement())
  text     String
  item_tag item_tag[]
}

model item_tag {
  id      Int  @unique @default(autoincrement())
  item_id Int
  tag_id  Int
  tag     tag  @relation(fields: [tag_id], references: [id])
  item    item @relation(fields: [item_id], references: [id], onDelete: Cascade)
}
